{#
  Generates C++ declaration
  @grammar: Assignment = variableName:QualifiedName "=" Expr;
  @param ast ASTAssignment
#}
{%- if tracing %}/* generated by {{self._TemplateReference__context.name}} */ {% endif %}
{% set lhsVariable = assignments.lhsVariable(ast) -%}
{%- if assignments.isVectorizedAssignment(ast) -%}
for (long i=0; i < P_.{{assignments.printSizeParameter(ast)}}; i++) {
  {%- if lhsVariable.has_vector_parameter() -%}
    {{printer.printOrigin(lhsVariable)}}{{names.name(lhsVariable)}}[i]
  {%- else -%}
    {{printer.printOrigin(lhsVariable)}}{{names.name(lhsVariable)}}
  {%- endif -%}
  {{assignments.printAssignmentsOperation(ast)}}
  {{printer.print_expression(ast.get_expression())}};
}
{%- else -%}
  {{printer.printOrigin(lhsVariable)}}{{names.name(lhsVariable)}} {{assignments.printAssignmentsOperation(ast)}} {{printer.print_expression(ast.get_expression())}};
{%- endif -%}
