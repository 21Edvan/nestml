/*  Name: hh_cond_exp_traub - Hodgin Huxley based model, Traub modified.

Description:

 hh_cond_exp_traub is an implementation of a modified Hodkin-Huxley model

 (1) Post-synaptic currents
 Incoming spike events induce a post-synaptic change of conductance modeled
 by an exponential function. The exponential function is normalized such that an
 event of weight 1.0 results in a peak current of 1 nS.

 (2) Spike Detection
 Spike detection is done by a combined threshold-and-local-maximum search: if
 there is a local maximum above a certain threshold of the membrane potential,
 it is considered a spike.

Problems/Todo:
Only the channel variables m,h,n are implemented. The original
contains variables called y,s,r,q and \chi.

Parameters:

 The following parameters can be set in the status dictionary.

 V_m        double - Membrane potential in mV
 V_T        double - Voltage offset that controls dynamics. For default
                     parameters, V_T = -63mV results in a threshold around
                     -50mV.
 E_L        double - Leak reversal potential in mV.
 C_m        double - Capacity of the membrane in pF.
 g_L        double - Leak conductance in nS.
 tau_syn_ex double - Time constant of the excitatory synaptic exponential
                     function in ms.
 tau_syn_in double - Time constant of the inhibitory synaptic exponential
                     function in ms.
 E_ex       double - Excitatory synaptic reversal potential in mV.
 E_in       double - Inhibitory synaptic reversal potential in mV.
 E_Na       double - Sodium reversal potential in mV.
 g_Na       double - Sodium peak conductance in nS.
 E_K        double - Potassium reversal potential in mV.
 g_K        double - Potassium peak conductance in nS.
 I_e        double - External input current in pA.

References:

Traub, R.D. and Miles, R. (1991) Neuronal Networks of the Hippocampus.
Cambridge University Press, Cambridge UK.

Sends: SpikeEvent

Receives: SpikeEvent, CurrentEvent, DataLoggingRequest

Author: Schrader

SeeAlso: hh_psc_alpha*/
neuron hh_cond_exp_traub_nestml:

  state:
    V_m mV = E_L
    alias V mV = V_m - V_T
    I_ex,  I_in pA

    # equilibrium values for (in)activation variables
    alias alpha_n real = 0.032 * ( 15. - V ) / ( exp( ( 15. - V ) / 5. ) - 1. )
    alias beta_n real = 0.5 * exp( ( 10. - V ) / 40. )
    alias alpha_m real = 0.32 * ( 13. - V ) / ( exp( ( 13. - V ) / 4. ) - 1. )
    alias beta_m real = 0.28 * ( V - 40. ) / ( exp( ( V - 40. ) / 5. ) - 1. )
    alias alpha_h real = 0.128 * exp( ( 17. - V ) / 18. )
    alias beta_h real = 4. / ( 1. + exp( ( 40. - V ) / 5. ) )

    Act_m real =  alpha_m / ( alpha_m + beta_m )
    Act_h real = alpha_h / ( alpha_h + beta_h )
    Inact_n real =  alpha_n / ( alpha_n + beta_n )

    alias I_Na  real = g_Na * Act_m * Act_m * Act_m * Act_h * ( V_m - E_Na );
    alias I_K   real  = g_K * Inact_n * Inact_n * Inact_n * Inact_n * ( V_m - E_K );
    alias I_L   real = g_L * ( V_m - E_L );
  end

  equations:
    V_m' =( -( I_Na + I_K + I_L ) + I_stim + I_e + I_ex + I_in ) / C_m

    Act_m' = alpha_m * ( 1 - Act_m ) - beta_m * Act_m # m-variable
    Act_h' = alpha_h * ( 1 - Act_h ) - beta_h * Act_h # h-variable
    Inact_n' = alpha_n * ( 1 - Inact_n ) - beta_n * Inact_n # n-variable

    # synapses: alpha functions
    I_ex' = -I_ex / tau_syn_ex

    I_in' = -I_in / tau_syn_in
  end

  parameter:
    g_Na nS = 20000.0nS     # Threshold Potential in mV
    g_K nS = 6000.0nS # K Conductance
    g_L nS = 10nS # Leak Conductance
    C_m pF = 200.0pF       # Membrane Capacitance in pF
    E_Na mV = 50mV #  Reversal potentials
    E_K mV = -90.mV
    E_L mV = -60.mV     # Leak reversal Potential (aka resting potential) in mV
    V_T mV = -63.0ms       # adjusts threshold to around -50 mV
    tau_syn_ex ms = 5.0ms     # Synaptic Time Constant Excitatory Synapse in ms
    tau_syn_in ms = 10.0ms    # Synaptic Time Constant for Inhibitory Synapse in ms
    I_e pA = 0pA           # Constant Current in pA

    # Input current injected by CurrentEvent.
    # This variable is used to transport the current applied into the
    # _dynamics function computing the derivative of the state vector.
    I_stim pA = 0
  end

  internal:
    r integer
    RefractoryCounts integer = 20
  end

  input:
      spikeInh   <- inhibitory spike
      spikeExc   <- excitatory spike
      currents <- current
  end

  output: spike

  update:
    U_old mV = V_m
    integrate(V_m)

    if r > 0:
      r -= 1
    elif V_m > V_T + 30 and U_old > V_m:
      r = RefractoryCounts
      emit_spike()
    end

    I_stim = currents.getSum()

    I_ex += spikeExc.getSum()
    I_in += spikeInh.getSum()
  end

end
