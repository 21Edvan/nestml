neuron aeif_cond_exp_neuron:

  initial_values:
    V_m mV = E_L
    w pA = 0 pA
  end

  equations:
    function V_bounded mV = bounded_min(V_m, V_peak)
    shape g_in = exp(-1/tau_syn_in*t)
    shape g_ex = exp(-1/tau_syn_ex*t)

    function exp_arg real = (V_bounded-V_th)/Delta_T
    function I_spike pA = g_L*Delta_T*exp(exp_arg)
    function I_syn_exc pA = convolve(g_ex, spikeExc) * ( V_bounded - E_ex )
    function I_syn_inh pA = convolve(g_in, spikeInh) * ( V_bounded - E_in )

    V_m' = ( -g_L*( V_bounded - E_L ) + I_spike - I_syn_exc - I_syn_inh - w + I_e + I_stim ) / C_m
    w' = (a*(V_bounded - E_L) - w)/tau_w
  end

  parameters:
    C_m   pF = 281.0pF   
    t_ref ms = 0.0ms     
    V_reset mV = -60.0mV   
    g_L nS = 30.0nS      
    E_L mV = -70.6mV    
    I_e pA = 0pA           

    a nS = 4nS          
    b pA = 80.5pA      
    Delta_T mV = 2.0mV   
    tau_w ms = 144.0ms    
    V_th mV = -50.4mV    
    V_peak mV = 0mV      

    E_ex mV = 0mV        
    tau_syn_ex ms = 0.2ms  
    E_in mV = -85.0mV       
    tau_syn_in ms = 2.0ms   


    I_stim pA = 0pA
  end

  internals:
    RefractoryCounts integer = steps(t_ref)
    r integer
  end

  input:
      spikeInh nS <- inhibitory spike
      spikeExc nS <- excitatory spike
      currents <- current
  end

  output: spike

  update:
    integrate_odes()

    if r > 0:
      r -= 1
      V_m = V_reset
    elif V_m >= V_peak:
      r = RefractoryCounts + 1
      V_m = V_reset
      w += b
      emit_spike()
    end


  end

end

