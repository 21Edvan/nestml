/*
 * Copyright (c) 2015 RWTH Aachen. All rights reserved.
 *
 * http://www.se-rwth.de/
 */
package org.nest;

grammar SPL extends org.nest.ODE, org.nest.Units {

  SPLFile = ModuleDefinitionStatement Block;

  ModuleDefinitionStatement = "module" moduleName:QualifiedName;

  Block = ( Stmt | NEWLINE )*;

  Stmt = Simple_Stmt | Compound_Stmt;

  Compound_Stmt = IF_Stmt
                | FOR_Stmt
                | WHILE_Stmt;

  Simple_Stmt = Small_Stmt (";" Small_Stmt)* (";")? NEWLINE?;

  Small_Stmt = Assignment
             | FunctionCall
             | Declaration
             | ReturnStmt;

  Assignment = lhsVarialbe:Name
    (assignment:["="]       |
     compoundSum:["+="]     |
     compoundMinus:["-="]   |
     compoundProduct:["*="] |
     compoundQuotient:["/="]) Expr;


  /** ASTDeclaration A variable declaration. It can be a simple declaration defining one or multiple variables:
   'a,b,c real = 0'. Or an alias declaration 'alias a = b + c'.
    @attribute vars          List with variables
    @attribute Datatype      Obligatory data type, e.g. 'real' or 'mV/s'
    @attribute sizeParameter An optional array parameter. E.g. 'tau_syn ms[n_receptros]'
    @attribute expr An optional initial expression, e.g. 'a real = 10+10'
   */
  Declaration =
    vars:Name ("," vars:Name)*
    Datatype
    ("[" sizeParameter:Name "]")?
    ( "=" Expr)? ;

  /** ASTDefiningVariable Signed variable name

    @attribute minus An optional sing
    @attribute definingVariable Name of the variable
   */
  DefiningVariable = (minus:["-"])? definingVariable:Name;

  /** ATReturnStmt Models the return statement in a function.

    @attribute minus An optional sing
    @attribute definingVariable Name of the variable
   */
  ReturnStmt = "return" Expr?;

  IF_Stmt = IF_Clause
            ELIF_Clause*
            (ELSE_Clause)?
            BLOCK_CLOSE;

  IF_Clause = "if" Expr BLOCK_OPEN Block;

  ELIF_Clause = "elif" Expr BLOCK_OPEN Block;

  ELSE_Clause = "else" BLOCK_OPEN Block;

  FOR_Stmt = "for" var:Name "in" from:Expr "..." to:Expr ("step" step:SignedNumericLiteral)? BLOCK_OPEN Block BLOCK_CLOSE;

  WHILE_Stmt = "while" Expr BLOCK_OPEN Block BLOCK_CLOSE;

  /** ASTFunction a function definition:
      function set_V_m(v mV):
        y3 = v - E_L
      end
    @attribute name Functionname.
    @attribute parameters List with function parameters.
    @attribute returnType Complex return type, e.g. String
    @attribute primitiveType Primitive return type, e.g. int
    @attribute block Implementation of the function.
  */
  Function = "function" Name "(" Parameters? ")" (returnType:Datatype)?
           BLOCK_OPEN
             Block
           BLOCK_CLOSE;

  /** ASTParameters models parameter list in function declaration.
    @attribute parameters List with parameters.
  */
  Parameters = Parameter ("," Parameter)*;

  /** ASTParameter represents singe:
      output: spike
    @attribute compartments Lists with compartments.
  */
  Parameter = Name Datatype;

}
