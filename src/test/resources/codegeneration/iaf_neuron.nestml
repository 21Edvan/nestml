/* BeginDocumentation
Name: iaf_neuron - Leaky integrate-and-fire neuron model.

Description:

iaf_neuron is an implementation of a leaky integrate-and-fire model
with alpha-function shaped synaptic currents. Thus, synaptic currents
and the resulting post-synaptic potentials have a finite rise time.
The threshold crossing is followed by an absolute refractory period
during which the membrane potential is clamped to the resting potential.

The subthreshold membrane potential dynamics are given by [3]

dV_m/dt = - ( V_m - E_L ) / tau_m + I_syn(t) / C_m + I_e / C_m

where I_syn(t) is the sum of alpha-shaped synaptic currents

I_syn(t) = Sum[w_j alpha(t-t_j) for t_j in input spike times]

w_j is the synaptic weight of the connection through which the spike
at time t_j arrived. Each individual alpha-current is given by

alpha(t) = e * t/tau_s * e^{-t/tau_s} * Heaviside(t)

alpha(t=tau_s) == 1 is the maximum of the alpha-current.

The linear subthresold dynamics is integrated by the Exact
Integration scheme [1]. The neuron dynamics is solved on the time
grid given by the computation step size. Incoming as well as emitted
spikes are forced to that grid.

An additional state variable and the corresponding differential
equation represents a piecewise constant external current.

The general framework for the consistent formulation of systems with
neuron like dynamics interacting by point events is described in
[1].  A flow chart can be found in [2].

Critical tests for the formulation of the neuron model are the
comparisons of simulation results for different computation step
sizes. sli/testsuite/nest contains a number of such tests.

The iaf_neuron is the standard model used to check the consistency
of the nest simulation kernel because it is at the same time complex
enough to exhibit non-trivial dynamics and simple enough to compute
relevant measures analytically.
*/
neuron iaf_neuron_nestml:

  # Captures the dynamic state of the neuron
  state:
    V mV
    G real
    alias V_m mV = V + E_L # Membrane potential.
  end

  # Declarative description of the updates rules
  equations:
      G = (e/tau_syn) * t * exp(-1/tau_syn*t)
      V' = -1/Tau * V + 1/C_m * (I_sum(G, spikes) + I_e + currents)
  end

  # these parameter are adjusted from outside
  parameter:
    C_m     pF = 250 [[C_m > 0]]   # Capacity of the membrane
    Tau     ms = 10    # Membrane time constant.
    tau_syn ms = 2     # Time constant of synaptic current.
    t_ref   ms = 2     # Refractory period.
    E_L     mV = -70  # Resting potential.
    alias V_reset mV = -70 - E_L
    alias Theta   mV = -55 - E_L
    I_e     pA = 0     # External current.
  end

  # helper calculations
  internal:
    RefractoryCounts integer = steps(t_ref)
    r  integer
  end

  # input sources
  input:
    spikes   <- spike
    currents <- current
  end

  # output events
  output: spike

  # Describes how the state evolves in the time
  update:
    if r == 0: # not refractory
        integrate(V)
        if V >= Theta: # threshold crossing
          r = RefractoryCounts
          V = V_reset
        emitSpike()
    end
    else:
        r = r - 1
    end


  end

  # Dummy function to test comment printing
  function test() void:
  end

end
