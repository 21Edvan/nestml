neuron iaf_psc_delta_neuron:

  state:
    y0 real = 0.0
    y3 real = 0.0 #!< This is the membrane potential RELATIVE TO RESTING POTENTIAL.

    # decay until end of refractory period.
    refr_spikes_buffer real = 0;
  end

  parameter:
    # Membrane time constant in ms.
    tau_m ms = 10.0
    # Membrane capacitance in pF
    c_m pF = 250.0
    # Refractory period in ms.
    t_ref ms = 2.0
    # Resting potential in mV.
    E_L mV = -70.0
    # External DC current
    I_e pA = 0.0
    # Threshold, RELATIVE TO RESTING POTENTAIL(!).
    # I.e. the real threshold is (U0_+V_th_).
    V_th mV = -55 - E_L
    # Lower bound, RELATIVE TO RESTING POTENTAIL(!).
    #    I.e. the real lower bound is (V_min+V_th). */
    V_min real = -inf;
    # reset value of the membrane potential
    V_reset real = -70.0-E_L;
    with_refr_input boolean = false  #!< spikes arriving during refractory period are counted
  end

  internal:
    h   ms   = resolution()
    r integer = 0  #//!< Number of refractory steps remaining

    P33 real = exp(-h/tau_m)
    P30 real = 1 / c_m * (1.0 - P33) * tau_m
    RefractoryCounts real = steps(t_ref) | RefractoryCounts >= 0
  end

  input:
      spikeBufferInh   <- inhibitory spike
      spikeBufferExc   <- excitatory spike
      currentBuffer <- current
  end

  output: spike

  update:
    if r == 0: # neuron not refractory
      y3 = P30*(y0 + I_e) + P33*y3 + spikeBufferInh.getSum()

      # if we have accumulated spikes from refractory period,
      # add and reset accumulator
      if with_refr_input and refr_spikes_buffer != 0.0:
        y3 = y3 + refr_spikes_buffer
        refr_spikes_buffer = 0.0
      end

      # lower bound of membrane potential
      if y3 < V_min:
        y3 = V_min
      end
    else: # neuron is absolute refractory
      # read spikes from buffer and accumulate them, discounting
      # for decay until end of refractory period
      if with_refr_input:
        refr_spikes_buffer = refr_spikes_buffer + spikeBufferInh.getSum() * exp(-r * h / tau_m)
      else:
        spikeBufferInh.getSum()  # clear buffer entry, ignore spike
        r = r - 1
      end
    end

    # threshold crossing
    if y3 >= V_th:
      r = RefractoryCounts
      y3 = V_reset

      # EX: must compute spike time
      emitSpike()
    end

  end

end
