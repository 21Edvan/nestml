neuron glif_2:

  state:
    V mV
    I_a_1 pA
    I_a_2 pA
    I_shape_in, I_shape_ex real
    Theta   mV
  end

  equations:
      I_shape_in = exp(-1/tau_syn_in*t)
      I_shape_ex = exp(-1/tau_syn_ex*t)

      Theta' = -b*(Theta-Theta_inf) + a*(V-E_L)
      I_a_1' = -(1/tau_a_1)*I_a_1
      I_a_2' = -(1/tau_a_2)*I_a_2
      V' = -1/Tau * (V-E_L) + 1/C_m * (I_sum(I_shape_in, in_spikes) + I_sum(I_shape_ex, ex_spikes) + I_e + currents + I_a_1+I_a_2)
  end

  parameter:
    tau_a_1 real
    tau_a_2 real
    a real = 1 # TODO 1/ms
    b real = 1 # TODO 1/ms
    Theta_inf mV
    Theta_reset mV
    n integer # adaptive current increment factor
    C_m     pF = 250   # Capacity of the membrane
    Tau     ms = 10    # Membrane time constant.
    tau_syn_in ms = 2     # Time constant of synaptic current.
    tau_syn_ex ms = 2     # Time constant of synaptic current.
    t_ref   ms = 2     # Refractory period.
    E_L     mV = -70  # Resting potential.
    V_reset mV = 0 [[V_reset < Theta_reset]]
    I_e     pA = 0     # External current.
    Alpha_1 real = 0 # spike frequency adaptation. TODO check the correct type
    Alpha_2 real = 0 # spike frequency adaptation. TODO check the correct type
    kappa_1 real = 1 # TODO check the correct type
    kappa_2 real = 1 # TODO check the correct type
  end

  internal:
    h   ms   = resolution()
    r  integer
    RefractoryCounts integer = steps(t_ref)
  end

  input:
    ex_spikes   <- excitatory spike
    in_spikes   <- inhibitory spike
    currents    <- current
  end

  output: spike

  update:
    if r == 0: # not refractory
        integrate(V)
        integrate(Theta)
        integrate(I_a_1)
        integrate(I_a_2)
    else:
        r = r - 1
    end

    if V >= Theta: # threshold crossing
        r = RefractoryCounts
        V = V_reset
        emit_spike()
        Theta = max(Theta, Theta_reset)
        I_a_1 = kappa_1*I_a_1 + Alpha_1
        I_a_2 = kappa_2*I_a_2 + Alpha_2
    end
  end

end