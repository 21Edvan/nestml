neuron glif:

  state:
    V mV
    I_a pA[n]
    I_shape_in, I_shape_ex real
    Theta   mV
  end

  equations:
      shape I_shape_in = (e/tau_syn_in) * t * exp(-1/tau_syn_in*t)
      shape I_shape_ex = (e/tau_syn_ex) * t * exp(-1/tau_syn_ex*t)
      I_a' = -(1/tau_a)*I_a

      V' = -1/Tau * (V-E_L) + 1/C_m * (sum(I_a)+I_sum(I_shape_in, in_spikes) + I_sum(I_shape_ex, ex_spikes) + I_e + currents)

      Theta' = -b*(Theta-Theta_inf) + a*(V-E_L)
  end

  parameter:
    a real = 1 # TODO 1/ms
    b real = 1 # TODO 1/ms
    Theta_inf mV
    Theta_reset mV
    n integer # adaptive current increment factor
    C_m     pF = 250   # Capacity of the membrane
    Tau     ms = 10    # Membrane time constant.
    tau_syn_in ms = 2     # Time constant of synaptic current.
    tau_syn_ex ms = 2     # Time constant of synaptic current.
    tau_a ms[n] = 2     # Time constant of synaptic current.
    t_ref   ms = 2     # Refractory period.
    E_L     mV = -70  # Resting potential.
    V_reset mV = 0 [[V_reset < Theta_reset]]
    I_e     pA = 0     # External current.
    Alpha real[n] = 0 # spike frequency adaptation. TODO check the correct type
    kappa real[n] = 1 # TODO check the correct type
  end

  internal:
    h   ms   = resolution()
    r  integer
    RefractoryCounts integer = steps(t_ref)
  end

  input:
    ex_spikes   <- excitatory spike
    in_spikes   <- inhibitory spike
    currents    <- current
  end

  output: spike

  update:
    if r == 0: # not refractory
        integrate(V)
    else:
        r = r - 1
    end

    if V >= Theta: # threshold crossing
        r = RefractoryCounts
        V = V_reset
        emitSpike()
        Theta = max(Theta, Theta_reset)
        I_a = kappa*I_a + Alpha
    end
  end

end