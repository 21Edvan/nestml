package codegeneration.iaf_tum_2000:

neuron iaf_tum_2000_neuron:
  state:
    i_0       mV
    i_syn_ex  mV
    i_syn_in  mV
    # membrane potential relative to zero
    delta_V_m mV

    # alias for the actual membrane potential
    alias V_m mV = E_L + delta_V_m
  end

  parameter:
    # Membrane time constant.
    tau_m         ms = 10.0
    # Membrane capacitance.
    C_m           pF = 250.0
    # Refractory period
    t_ref_abs     ms = 2.0
    # Refractory period
    t_ref_tot     ms = 2.0
    # Resting potential
    E_L           mV = -70.0
    # relative threshold
    delta_V_th   mV = 15.0
    # relative reset value
    delta_V_reset mV = 0.0
    # External current
    I_e           pA = 0.0
    # Time constant of excitatory synaptic current
    tau_syn_ex     ms = 2.0
    # Time constant of inhibitory synaptic current
    tau_syn_in     ms = 2.0

    # alias for the actual threshold
    alias V_th   mV = E_L + delta_V_th
    # alias for the actual reset value
    alias V_reset mV = E_L + delta_V_reset
  end

  internal:
    h     ms   = resolution()
    - r_abs integer
    - r_tot integer

    P11ex real = pow(E, (-h / tau_syn_ex))
    P11in real = pow(E, (-h / tau_syn_in))
    P22   real = pow(E, (-h / tau_m))
    P21ex real = tau_m / (C_m * (1.0 - tau_m / tau_syn_ex)) * P11ex * (1.0 - pow(E, h * (1.0 / tau_syn_ex - 1.0 / tau_m)))
    P21in real = tau_m / (C_m * (1.0 - tau_m / tau_syn_in)) * P11in * (1.0 - pow(E, h * (1.0 / tau_syn_in - 1.0 / tau_m)))
    P20   real = tau_m / C_m * (1.0 - P22)

    RefrCountAbs integer = steps(t_ref_abs)
    RefrCountTot integer = steps(t_ref_tot)
  end

  input:
    inhBuffer      <- inhibitory spike
    excBuffer1      <- excitatory spike
    excBuffer2      <- excitatory spike
    currentBuffer  <- current
  end

  output: spike

  dynamics timestep(t ms):

    if r_abs == 0: # neuron not refractory, so evolve V
        delta_V_m = delta_V_m * P22 + i_syn_ex * P21ex + i_syn_in * P21in + (I_e + i_0) * P20
    else:
        r_abs = r_abs - 1 # neuron is absolute refractory
    end

    # exponential decaying PSCs
    i_syn_ex = i_syn_ex * P11ex
    i_syn_in = i_syn_in * P11in
    i_syn_ex = i_syn_ex + excBuffer1.getSum(t)    # the spikes arriving at T+1 have an
    i_syn_in = i_syn_in + inhBuffer.getSum(t)    # the spikes arriving at T+1 have an
                                                 # immediate effect on the state of the neuron

    if r_tot == 0:
        if V_m >= V_th:           # threshold crossing
            r_abs  = RefrCountAbs
            r_tot = RefrCountTot
            V_m    = V_reset

            emitSpike()
        end
    else:
        r_tot = r_tot - 1
    end

    i_0 = currentBuffer.getSum(t)
  end

  function set_V_th(v mV):
    delta_V_th = v - E_L
  end

  function set_V_reset(v mV):
    delta_V_reset = v - E_L
  end

  function set_V_m(v mV):
    delta_V_m = v - E_L
  end
end