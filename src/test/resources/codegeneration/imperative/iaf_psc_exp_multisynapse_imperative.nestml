neuron iaf_psc_exp_multisynapse_nestml:
  state:
    suppress i_syn real[num_of_receptors] = 0
    suppress i_0 real = 0.0
    V_m real = 0.0

  end

  parameter:
    num_of_receptors integer = 1
    # Membrane time constant
    Tau ms = 10.0
    # Membrane capacitance
    C_1 pF = 250.0
    # Refractory period
    t_ref ms = 2.0
    # Resting potential
    U0 mV = -70
    # External current in
    I_e pA = 0
    # Reset value of the membrane potential
    alias V_reset mV = -70 - U0
    alias Theta mV = -55.0 - U0 # Threshold, RELATIVE TO RESTING POTENTIAL(!).
                                # I.e. the real threshold is (U0_+Theta_).
    # Time constants of synaptic currents
    tau_syn ms[num_of_receptors]
    # boolean flag which indicates whether the neuron has connections
    has_connections boolean = false
    # This is the current in a time step. This is only here to allow logging
    currentValue pA = 0
  end

  internal:
    h   ms   = resolution()
    r_ref real = 0
    P11_syn real[num_of_receptors] = -h / tau_syn
    P21_syn real[num_of_receptors] = Tau/(C_1*(1.0-Tau/tau_syn)) * P11_syn * (1.0 - exp(h*(1.0/tau_syn-1.0/Tau)))
    P20 real = exp(-h/Tau)
    P22 real = Tau/C_1*(1.0 - P22)
    RefractoryCounts real = steps(t_ref) [[RefractoryCounts >= 0]]
  end

  input:
      spikeBufferInh[num_of_receptors] <- inhibitory spike
      currentBuffer <- current
  end

  output: spike

  update:
    if r_ref == 0: # neuron not refractory, so evolve V
      V_m = V_m * P22 + (I_e + i_0) * P20 # not sure about this
      currentValue = 0.0
      V_m = V_m + P21_syn*i_syn
      currentValue = currentValue + i_syn # not sure about this
    else:
      r_ref = r_ref - 1 # neuron is absolute refractory
    end

    i_syn = i_syn * P11_syn
    # collect spikes
    i_syn = i_syn + spikeBufferInh.get_sum() # not sure about this

    if V_m >= Theta:  # threshold crossing
      r_ref = RefractoryCounts
      V_m = V_reset

      emit_spike()
    end

    # set new input current
    i_0 = currentBuffer.get_sum()

  end

end
