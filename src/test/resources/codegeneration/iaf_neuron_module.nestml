package codegeneration.iaf_neuron_module:

  neuron iaf_neuron:
    state:
      - y0, y1, y2, y3 mV [y1 > 0; y2 > 0]
      - r  integer
      # Membrane potential.
      alias V_m mV = y3 + E_L
    end

    parameter:
      # Capacity of the membrane.
      C_m       pF = 250 [C_m  > 0]
      # Membrane time constant.
      tau_m     ms = 10 [tau_m > 0]
      # Time constant of synaptic current.
      tau_syn ms = 2
      # Refractory period.
      t_ref    ms = 2
      # Resting potential.
      E_L      mV = -70
      - delta_V_reset mV = -70 - E_L
      -Theta   mV = -55 - E_L
      # External current.
      I_e     pA = 0

      # some aliases
      # Threshold.
      alias V_th mV = Theta + E_L
      # Reset value of the membrane potential.
      alias  V_reset mV = delta_V_reset + E_L [V_reset >= Theta]
    end


    internal:
      h   ms   = resolution()
      P11 real = exp(-h / tau_syn)
      P22 real = P11
      P33 real = exp(-h / tau_m)
      P21 real = h * P11
      P30 real = 1 / C_m * (1 - P33) * tau_m
      P31 real = 1 / C_m * ((P11 - P33) / (-1/tau_syn - -1/tau_m) - h * P11) / (-1/tau_m - -1/tau_syn)
      P32 real = 1 / C_m * (P33 - P11) / (-1/tau_m - -1/tau_syn)

      PSCInitialValue  mV = 1 * E / tau_syn
      RefractoryCounts integer = steps(t_ref)
    end

    input:
      spikeBuffer   <- inhibitory excitatory spike
      currentBuffer <- current
    end

    output: spike

    dynamics timestep(t ms):
      if r == 0: # not refractory
        y3 = P30 * (y0 + I_e) + P31 * y1 + P32 * y2 + P33 * y3
      else:
        r = r - 1
      end

      # alpha shape PSCs
      y2 = P21 * y1 + P22 * y2
      y1 = y1 * P11

      # Apply spikes delivered in this step: The spikes arriving at T+1 have an
      # immediate effect on the state of the neuron
      y1 = y1 + PSCInitialValue * spikeBuffer.getSum(t)

      # threshold crossing
      if y3 >= Theta:
        r = RefractoryCounts
        y3 = delta_V_reset

        emitSpike()
      end

      # set new input current
      y0 = currentBuffer.getSum(t);
    end

    function set_V_th(v mV):
      Theta = v - E_L
    end

    function set_V_reset(v mV):
      delta_V_reset = v - E_L
    end

    function set_V_m(v mV):
      y3 = v - E_L
    end

  end

end
