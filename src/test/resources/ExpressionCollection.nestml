/*
This test neuron is used to test if parsing of expression works as required.
See ExpressionParserTest.py.
*/

neuron ExpressionCollection:
    update:
        #neuron aeif_cond_alpha_neuron
        test0 = E_L
        test1 = 0pA
        test2 = bounded_min(V_m, V_peak) # prevent exponential divergence
        test3 = (e/tau_syn_in) * t * exp(-t/tau_syn_in)
        test4 = (e/tau_syn_ex) * t * exp(-t/tau_syn_ex)
        test5 = (V_bounded-V_th)/Delta_T
        test6 = g_L*Delta_T*exp(exp_arg)
        test7 = cond_sum(g_ex, spikesExc) * ( V_bounded - E_ex )
        test8 = cond_sum(g_in, spikesInh) * ( V_bounded - E_in )
        test9 = ( -g_L*( V_bounded - E_L ) + I_spike - I_syn_exc - I_syn_inh - w + I_e + I_stim ) / C_m
        test10 = (a*(V_m - E_L) - w)/tau_w
        test11 = 281.0pF       ## Membrane Capacitance in pF
        test12 = 0.0ms         ## Refractory period in ms
        test13 = -60.0mV     ## Reset Potential in mV
        test14 = 30.0nS          ## Leak Conductance in nS
        test15 = -70.6mV         ## Leak reversal Potential (aka resting potential) in mV
        test16 = 0pA
        test17 = nS * e / tau_syn_ex
        test18 = nS * e / tau_syn_in
        test19 = steps(t_ref)
        test20 = r > 0
        test21 = V_m >= V_peak
        #neuron aeif_cond_exp_neuron
        test22 = E_L  # Membrane potential
        test23= 0 pA    # Spike-adaptation current
        test24 = bounded_min(V_m, V_peak) # prevent exponential divergence
        test25 = exp(-1/tau_syn_in*t)
        test26 = exp(-1/tau_syn_ex*t)
        test27 = (V_bounded-V_th)/Delta_T
        test28 = g_L*Delta_T*exp(exp_arg)
        test29 = cond_sum(g_ex, spikeExc) * ( V_bounded - E_ex )
        test30 = cond_sum(g_in, spikeInh) * ( V_bounded - E_in )
        test31 = ( -g_L*( V_bounded - E_L ) + I_spike - I_syn_exc - I_syn_inh - w + I_e + I_stim ) / C_m
        test32  = (a*(V_bounded - E_L) - w)/tau_w
        test33 = 281.0pF     # Membrane Capacitance in pF
        test34 = 0.0ms       # Refractory period in ms
        test35 = -60.0mV   # Reset Potential in mV
        test36 = 30.0nS        # Leak Conductance in nS
        test37 = -70.6mV       # Leak reversal Potential (aka resting potential) in mV
        test38 = 0pA           # Constant Current in pA
        test39 = 4nS             # Subthreshold adaptation.
        test40 = 80.5pA          # Spike-trigg_exred adaptation.
        test41 = 2.0mV     # Slope factor
        test42 = 144.0ms     # Adaptation time constant in
        test43 = -50.4mV      # Threshold Potential
        test44 = 0mV        # Spike detection threshold in mV.
        test45 = 0mV            # Excitatory reversal Potential in mV
        test46 = 0.2ms    # Synaptic Time Constant Excitatory Synapse in ms
        test47 = -85.0mV        # Inhibitory reversal Potential in mV
        test48 = 2.0ms    # Synaptic Time Constant for Inhibitory Synapse in ms
        test49 = 0pA
        test50 = steps(t_ref)
        test51 = r > 0 # refractory
        test52 = V_reset # clamp potential
        test53 = V_m >= V_peak # threshold crossing detection
        test54 = RefractoryCounts + 1
        test55 = V_reset # clamp potential
        test56 += b
        test57 = emit_spike()
        test58 = min(V_m, V_peak) # prevent exponential divergence
        test59' = -g_in/tau_syn_in
        test60 = -g_ex/tau_syn_ex
        test61 = (V_bounded-V_th)/Delta_T
        test62 = g_L*Delta_T*exp(exp_arg)
        test63 = cond_sum(g_ex, spikeExc) * ( V_bounded - E_ex )
        test64 = cond_sum(g_in, spikeInh) * ( V_bounded - E_in )
        test65 = ( -g_L*( V_bounded - E_L ) + I_spike - I_syn_exc - I_syn_inh - w + I_e + currents ) / C_m
        test66 = (a*(V_bounded - E_L) - w)/tau_w
        test67 += spikeExc * nS
        test68 += spikeInh * nS
        #hh_cond_exp_traub_neuron
        test69 mV = E_L #  Membrane potential
        test70 = 0nS # Inhibitory synaptic conductance
        test71 1/ms = 0.032/(ms* mV ) * ( 15. mV - V_m) / ( exp( ( 15. mV - V_m) / 5. mV ) - 1. )
        function test72 1/ms = 0.5 /ms * exp( ( 10. mV - V_m ) / 40. mV )
        function test73 1/ms = 0.32/(ms* mV ) * ( 13. mV - V_m) / ( exp( ( 13. mV - V_m) / 4. mV ) - 1. )
        function test74 1/ms = 0.28/(ms* mV ) * ( V_m  - 40. mV ) / ( exp( ( V_m - 40. mV ) / 5. mV ) - 1. )
        function test75 1/ms = 0.128/ms * exp( ( 17. mV - V_m) / 18. mV )
        function test76 1/ms = ( 4. / ( 1. + exp( ( 40. mV - V_m ) / 5. mV) ) ) / ms
        test77 real =  alpha_m_init / ( alpha_m_init + beta_m_init )
        test78 real = alpha_h_init / ( alpha_h_init + beta_h_init )
        test78 real =  alpha_n_init / ( alpha_n_init + beta_n_init )
        function I_Na  pA = g_Na * Act_m * Act_m * Act_m * Act_h * ( V_m - E_Na )
        function I_K   pA  = g_K * Inact_n * Inact_n * Inact_n * Inact_n * ( V_m - E_K )
        function I_L   pA = g_L * ( V_m - E_L )
        function I_syn_exc pA = cond_sum(g_ex, spikeExc) * ( V_m - E_ex )
        function I_syn_inh pA = cond_sum(g_in, spikeInh) * ( V_m - E_in )
        V_m' =( -I_Na - I_K - I_L - I_syn_exc - I_syn_inh + currents + I_e ) / C_m
        # channel dynamics
        function V_rel mV = V_m - V_T
        function alpha_n 1/ms = 0.032/(ms* mV ) * ( 15. mV - V_rel) / ( exp( ( 15. mV - V_rel) / 5. mV ) - 1. )
        function beta_n 1/ms = 0.5 /ms * exp( ( 10. mV - V_rel ) / 40. mV )
        function alpha_m 1/ms = 0.32/(ms* mV ) * ( 13. mV - V_rel) / ( exp( ( 13. mV - V_rel) / 4. mV ) - 1. )
        function beta_m 1/ms = 0.28/(ms* mV ) * ( V_rel  - 40. mV ) / ( exp( ( V_rel - 40. mV ) / 5. mV ) - 1. )
        function alpha_h 1/ms = 0.128/ms * exp( ( 17. mV - V_rel) / 18. mV )
        function beta_h 1/ms = ( 4. / ( 1. + exp( ( 40. mV - V_rel ) / 5. mV) ) ) / ms
        Act_m' = ( alpha_m - ( alpha_m + beta_m ) * Act_m )
        Act_h' = ( alpha_h - ( alpha_h + beta_h ) * Act_h )
        Inact_n' = ( alpha_n - ( alpha_n + beta_n ) * Inact_n )
        # synapses: exponential conductance
        g_ex' = -g_ex / tau_syn_ex
        g_in' = -g_in / tau_syn_in
        g_Na nS = 20000.0nS       # Threshold Potential in mV
        g_K nS = 6000.0nS         # K Conductance
        g_L nS = 10nS             # Leak Conductance
        C_m pF = 200.0pF          # Membrane Capacitance in pF
        E_Na mV = 50mV            # Reversal potentials
        E_K mV = -90.mV           # Potassium reversal potential
        E_L mV = -60.mV           # Leak reversal Potential (aka resting potential) in mV
        V_T mV = -63.0mV          # Voltage offset that controls dynamics. For default
                                  # parameters, V_T = -63mV results in a threshold around -50mV.
        tau_syn_ex ms = 5.0ms     # Synaptic Time Constant Excitatory Synapse in ms
        tau_syn_in ms = 10.0ms    # Synaptic Time Constant for Inhibitory Synapse in ms
        I_e pA = 0pA              # Constant Current in pA
        E_ex mV = 0.0 mV          # Excitatory synaptic reversal potential
        E_in mV = -80.0mV         # Inhibitory synaptic reversal potential
        RefractoryCounts integer = 20
        g_ex += spikeExc * nS
        g_in += spikeInh * nS
        test79 = V_m > V_T + 30mV and U_old > V_m
        V_m mV = E_L #  Membrane potential
        g_in nS = 0nS # Inhibitory synaptic conductance
        g_ex nS = 0nS # Excitatory synaptic conductance
        function alpha_n_init 1/ms = 0.032/(ms* mV ) * ( 15. mV - V_m) / ( exp( ( 15. mV - V_m) / 5. mV ) - 1. )
        function beta_n_init 1/ms = 0.5 /ms * exp( ( 10. mV - V_m ) / 40. mV )
        function alpha_m_init 1/ms = 0.32/(ms* mV ) * ( 13. mV - V_m) / ( exp( ( 13. mV - V_m) / 4. mV ) - 1. )
        function beta_m_init 1/ms = 0.28/(ms* mV ) * ( V_m  - 40. mV ) / ( exp( ( V_m - 40. mV ) / 5. mV ) - 1. )
        function alpha_h_init 1/ms = 0.128/ms * exp( ( 17. mV - V_m) / 18. mV )
        function beta_h_init 1/ms = ( 4. / ( 1. + exp( ( 40. mV - V_m ) / 5. mV) ) ) / ms
        Act_m real =  alpha_m_init / ( alpha_m_init + beta_m_init )
        Act_h real = alpha_h_init / ( alpha_h_init + beta_h_init )
        Inact_n real =  alpha_n_init / ( alpha_n_init + beta_n_init )
        r integer # counts number of tick during the refractory period
        function I_Na  pA = g_Na * Act_m * Act_m * Act_m * Act_h * ( V_m - E_Na )
        function I_K   pA  = g_K * Inact_n * Inact_n * Inact_n * Inact_n * ( V_m - E_K )
        function I_L   pA = g_L * ( V_m - E_L )
        function I_syn_exc pA = cond_sum(g_ex, spikeExc) * ( V_m - E_ex )
        function I_syn_inh pA = cond_sum(g_in, spikeInh) * ( V_m - E_in )
        V_m' =( -I_Na - I_K - I_L - I_syn_exc - I_syn_inh + currents + I_e ) / C_m
        # channel dynamics
        function V_rel mV = V_m - V_T
        function alpha_n 1/ms = 0.032/(ms* mV ) * ( 15. mV - V_rel) / ( exp( ( 15. mV - V_rel) / 5. mV ) - 1. )
        function beta_n 1/ms = 0.5 /ms * exp( ( 10. mV - V_rel ) / 40. mV )
        function alpha_m 1/ms = 0.32/(ms* mV ) * ( 13. mV - V_rel) / ( exp( ( 13. mV - V_rel) / 4. mV ) - 1. )
        function beta_m 1/ms = 0.28/(ms* mV ) * ( V_rel  - 40. mV ) / ( exp( ( V_rel - 40. mV ) / 5. mV ) - 1. )
        function alpha_h 1/ms = 0.128/ms * exp( ( 17. mV - V_rel) / 18. mV )
        function beta_h 1/ms = ( 4. / ( 1. + exp( ( 40. mV - V_rel ) / 5. mV) ) ) / ms
        Act_m' = ( alpha_m - ( alpha_m + beta_m ) * Act_m )
        Act_h' = ( alpha_h - ( alpha_h + beta_h ) * Act_h )
        Inact_n' = ( alpha_n - ( alpha_n + beta_n ) * Inact_n )
        # synapses: exponential conductance
        g_ex' = -g_ex / tau_syn_ex
        g_in' = -g_in / tau_syn_in
        g_Na nS = 20000.0nS       # Threshold Potential in mV
        g_K nS = 6000.0nS         # K Conductance
        g_L nS = 10nS             # Leak Conductance
        C_m pF = 200.0pF          # Membrane Capacitance in pF
        E_Na mV = 50mV            # Reversal potentials
        E_K mV = -90.mV           # Potassium reversal potential
        E_L mV = -60.mV           # Leak reversal Potential (aka resting potential) in mV
        V_T mV = -63.0mV          # Voltage offset that controls dynamics. For default
                                  # parameters, V_T = -63mV results in a threshold around -50mV.
        tau_syn_ex ms = 5.0ms     # Synaptic Time Constant Excitatory Synapse in ms
        tau_syn_in ms = 10.0ms    # Synaptic Time Constant for Inhibitory Synapse in ms
        I_e pA = 0pA              # Constant Current in pA
        E_ex mV = 0.0 mV          # Excitatory synaptic reversal potential
        E_in mV = -80.0mV         # Inhibitory synaptic reversal potential
        V_m mV = -65. mV # Membrane potential
        function alpha_n_init real = ( 0.01 * ( V_m / mV + 55. ) ) / ( 1. - exp( -( V_m / mV + 55. ) / 10. ) )
        function beta_n_init  real = 0.125 * exp( -( V_m / mV + 65. ) / 80. )
        function alpha_m_init real = ( 0.1 * ( V_m / mV + 40. ) ) / ( 1. - exp( -( V_m / mV + 40. ) / 10. ) )
        function beta_m_init  real = 4. * exp( -( V_m / mV + 65. ) / 18. )
        function alpha_h_init real = 0.07 * exp( -( V_m / mV + 65. ) / 20. )
        function beta_h_init  real = 1. / ( 1. + exp( -( V_m / mV + 35. ) / 10. ) )
        Act_m real =  alpha_m_init / ( alpha_m_init + beta_m_init )   # Activation variable m
        Act_h real = alpha_h_init / ( alpha_h_init + beta_h_init )    # Activation variable h
        Inact_n real =  alpha_n_init / ( alpha_n_init + beta_n_init ) # Inactivation variable n
        r integer # number of steps in the current refractory phase
        # synapses: alpha functions
        I_syn_in = (e/tau_syn_in) * t * exp(-t/tau_syn_in)
        I_syn_ex = (e/tau_syn_ex) * t * exp(-t/tau_syn_ex)
        function I_syn_exc pA = curr_sum(I_syn_ex, spikeExc)
        function I_syn_inh pA = curr_sum(I_syn_in, spikeInh)
        function I_Na  pA = g_Na * Act_m * Act_m * Act_m * Act_h * ( V_m - E_Na )
        function I_K   pA  = g_K * Inact_n * Inact_n * Inact_n * Inact_n * ( V_m - E_K )
        function I_L   pA = g_L * ( V_m - E_L )
        V_m' =( -( I_Na + I_K + I_L ) + currents + I_e + I_syn_inh + I_syn_exc ) / C_m
        # Inact_n
        function alpha_n real = ( 0.01 * ( V_m / mV + 55. ) ) / ( 1. - exp( -( V_m / mV + 55. ) / 10. ) )
        function beta_n  real = 0.125 * exp( -( V_m / mV + 65. ) / 80. )
        Inact_n' = ( alpha_n * ( 1 - Inact_n ) - beta_n * Inact_n ) / ms # n-variable
        # Act_m
        function alpha_m real = ( 0.1 * ( V_m / mV + 40. ) ) / ( 1. - exp( -( V_m / mV + 40. ) / 10. ) )
        function beta_m  real = 4. * exp( -( V_m / mV + 65. ) / 18. )
        Act_m' = ( alpha_m * ( 1 - Act_m ) - beta_m * Act_m ) / ms # m-variable
        # Act_h'
        function alpha_h real = 0.07 * exp( -( V_m / mV + 65. ) / 20. )
        function beta_h  real = 1. / ( 1. + exp( -( V_m / mV + 35. ) / 10. ) )
        Act_h' = ( alpha_h * ( 1 - Act_h ) - beta_h * Act_h ) / ms # h-variable

    end
end