/* * Copyright (c) 2015 RWTH Aachen. All rights reserved. * * http://www.se-rwth.de/ */package org.nest.spl.prettyprinter;import org.junit.Test;import org.nest.base.ModelbasedTest;import org.nest.nestml._ast.ASTBlock;import org.nest.nestml._ast.ASTNESTMLCompilationUnit;import org.nest.nestml._parser.NESTMLParser;import org.nest.nestml.prettyprinter.ExpressionsPrettyPrinter;import org.nest.nestml.prettyprinter.SPLPrettyPrinter;import org.nest.utils.AstUtils;import java.io.IOException;import java.io.StringReader;import java.nio.file.Path;import java.nio.file.Paths;import java.util.List;import java.util.Optional;import java.util.stream.IntStream;import static org.junit.Assert.assertTrue;import static org.nest.utils.FilesHelper.collectFiles;/** * Checks that the pretty printed result can be parsed again. * * @author plotnikov */public class SPLPrettyPrinterTest extends ModelbasedTest {  private final NESTMLParser nestmlParser = new NESTMLParser();  private final ExpressionsPrettyPrinter prettyPrinter = new ExpressionsPrettyPrinter();  @Test  public void testPrintingComment() throws IOException {    final SPLPrettyPrinter splPrettyPrinter = new SPLPrettyPrinter(prettyPrinter);    final ASTNESTMLCompilationUnit root = parseNESTMLModel("src/test/resources/org/nest/nestml/parsing/comment.nestml");    final Optional<ASTBlock> astBlock = AstUtils.getAny(root, ASTBlock.class);    assertTrue(astBlock.isPresent());    splPrettyPrinter.print(astBlock.get());    final String printedModel = splPrettyPrinter.result();    System.out.println(printedModel);    Optional<ASTBlock> prettyPrintedRoot = nestmlParser.parseBlock(new StringReader(splPrettyPrinter.result()));    assertTrue(prettyPrintedRoot.isPresent());    IntStream.range(1, 11).forEach(        index -> assertTrue("Comment" + index + " is missing.", printedModel.contains("Comment " + index)));  }  @Test  public void testAllModelsForParser() throws IOException {    parseAndCheckSPLModelsFromFolder("src/test/resources/org/nest/spl");  }  private void parseAndCheckSPLModelsFromFolder(final String folderPath) throws IOException {    final List<Path> splFiles = collectFiles(        Paths.get(folderPath),        model -> model.endsWith(".simple"));    for (final Path splModelFile : splFiles) {      System.out.println("Handles the model: " + splModelFile);      final SPLPrettyPrinter splPrettyPrinter = new SPLPrettyPrinter(prettyPrinter);      final Optional<ASTNESTMLCompilationUnit> splModelRoot = nestmlParser.parse(splModelFile.toString());      assertTrue("Cannot parse the model: " + splModelFile, splModelRoot.isPresent());      splModelRoot.get().accept(splPrettyPrinter);      //System.out.println(splPrettyPrinter.result());      Optional<ASTNESTMLCompilationUnit> prettyPrintedRoot = nestmlParser.parse(new StringReader(splPrettyPrinter.result()));      assertTrue(prettyPrintedRoot.isPresent());    }  }}