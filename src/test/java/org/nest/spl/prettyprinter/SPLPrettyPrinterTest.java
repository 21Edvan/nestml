/* * Copyright (c) 2015 RWTH Aachen. All rights reserved. * * http://www.se-rwth.de/ */package org.nest.spl.prettyprinter;import org.junit.Test;import org.nest.base.ModelbasedTest;import org.nest.spl._ast.ASTSPLFile;import org.nest.spl._parser.SPLParser;import org.nest.spl._symboltable.SPLLanguage;import java.io.IOException;import java.io.StringReader;import java.nio.file.Path;import java.nio.file.Paths;import java.util.List;import java.util.Optional;import static org.junit.Assert.assertTrue;import static org.nest.utils.FilesHelper.collectFiles;/** * Checks that the pretty printed result can be parsed again. * * @author plotnikov */public class SPLPrettyPrinterTest extends ModelbasedTest {  private final SPLParser splFileParser = new SPLParser();  private final ExpressionsPrettyPrinter prettyPrinter = new ExpressionsPrettyPrinter();  @Test  public void testPrintingComment() throws IOException {    final SPLPrettyPrinter splPrettyPrinter = new SPLPrettyPrinter(prettyPrinter);    final Optional<ASTSPLFile> root = splFileParser.parse("src/test/resources/org/nest/spl/parsing/comment.simple");    assertTrue(root.isPresent());    root.get().accept(splPrettyPrinter); // starts prettyPrinter    Optional<ASTSPLFile> prettyPrintedRoot = parseStringAsSPLFile(splPrettyPrinter.getResult());    assertTrue(prettyPrintedRoot.isPresent());    final String printedModel = splPrettyPrinter.getResult();    System.out.println(printedModel);    assertTrue(printedModel.contains("Commet 1"));    assertTrue(printedModel.contains("Commet 2"));    assertTrue(printedModel.contains("Commet 3"));  }  @Test  public void testAllModelsForParser() throws IOException {    parseAndCheckSPLModelsFromFolder("src/test/resources/org/nest/spl");  }  private void parseAndCheckSPLModelsFromFolder(final String folderPath) throws IOException {    final List<Path> splFiles = collectFiles(        Paths.get(folderPath),        model -> model.endsWith(SPLLanguage.FILE_ENDING));    for (final Path splModelFile : splFiles) {      System.out.println("Handles the model: " + splModelFile);      final SPLPrettyPrinter splPrettyPrinter = new SPLPrettyPrinter(prettyPrinter);      final Optional<ASTSPLFile> splModelRoot = splFileParser.parse(splModelFile.toString());      assertTrue("Cannot parse the model: " + splModelFile, splModelRoot.isPresent());      splModelRoot.get().accept(splPrettyPrinter);      //System.out.println(splPrettyPrinter.getResult());      Optional<ASTSPLFile> prettyPrintedRoot = parseStringAsSPLFile(splPrettyPrinter.getResult());      assertTrue(prettyPrintedRoot.isPresent());    }  }  private Optional<ASTSPLFile> parseStringAsSPLFile(final String fileAsString) throws IOException {    return splFileParser.parse(new StringReader(fileAsString));  }}